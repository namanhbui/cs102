# -*- coding: utf-8 -*-
"""
Created on Thu Jun 30 14:03:33 2022

@author: PC
"""

import enum
from typing import List, Tuple

import pygame
from pygame import Surface
from pygame.color import Color

SCREEN_WIDTH: int = 1280
SCREEN_HEIGHT: int = 768

WHITE: Color = Color(255, 255, 255)
RED: Color = Color(255, 0, 0)
BLUE: Color = Color(0, 0, 255)

FPS: int = 144

pygame.init()
screen: Surface = pygame.display.set_mode([SCREEN_WIDTH, SCREEN_HEIGHT])
clock = pygame.time.Clock()

def scale_image(image: Surface, scale: float) -> Surface:
    new_dimension: Tuple[int, int] = (
        int(image.get_width() * scale),
        int(image.get_height() * scale),
    )
    return pygame.transform.scale(image, new_dimension)

BACKGROUND_SPRITE: Surface = pygame.image.load("assets/background.png").convert_alpha()
BACKGROUND_SPRITE.set_alpha(128)
BACKGROUND_SPRITE = pygame.transform.scale(BACKGROUND_SPRITE, [SCREEN_WIDTH, SCREEN_HEIGHT])

PLAYER_SPRITE: Surface = scale_image(pygame.image.load("assets/player.png"), 0.2)
ROBOT_SPRITE: Surface = scale_image(pygame.image.load("assets/robot.png"), 0.08)
DIAMOND_BLUE_SPRITE: Surface = scale_image(pygame.image.load("assets/diamond_blue.png"), 0.02)
DIAMOND_RED_SPRITE: Surface = scale_image(pygame.image.load("assets/diamond_red.png"), 0.02)
TO_MO_SPRITE: Surface = scale_image(pygame.image.load("assets/to_mo.png"), 0.2)

FREESANSBOLD_24 = pygame.font.Font("freesansbold.ttf", 24)
FREESANSBOLD_48 = pygame.font.Font("freesansbold.ttf", 48)

class Player:
    def __init__(self, x: float, y: float) -> None:
        self.x: float = x
        self.y: float = y
        self.image: Surface = PLAYER_SPRITE

    def _move(self, dx: int, dy: int):
        new_x = self.x + dx
        new_y = self.y + dy

        if 0 < new_x < SCREEN_WIDTH - self.image.get_width():
            self.x = new_x
        if 0 < new_y < SCREEN_HEIGHT - self.image.get_height():
            self.y = new_y

    def update(self) -> None:
        pressed = pygame.key.get_pressed()
        if pressed[pygame.K_UP] or pressed[pygame.K_w]:
            self._move(0, -10)
        if pressed[pygame.K_DOWN] or pressed[pygame.K_s]:
            self._move(0, 10)
        if pressed[pygame.K_LEFT] or pressed[pygame.K_a]:
            self._move(-10, 0)
        if pressed[pygame.K_RIGHT] or pressed[pygame.K_d]:
            self._move(10, 0)

    def render(self, screen: Surface) -> None:
        screen.blit(self.image, (self.x, self.y))


class Robot:
    def __init__(self, x: float, y: float, x_heading: float, y_heading: float) -> None:
        self.x: float = x
        self.y: float = y
        self.image: Surface = ROBOT_SPRITE
        self.x_heading: float = x_heading
        self.y_heading: float = y_heading

    def update(self):
        self.x = self.x + self.x_heading
        self.y = self.y + self.y_heading

        if self.x > SCREEN_WIDTH - self.image.get_width():
            self.x_heading = -self.x_heading
        if self.x < 0:
            self.x_heading = -self.x_heading
        if self.y > SCREEN_HEIGHT - self.image.get_height():
            self.y_heading = -self.y_heading
        if self.y < 0:
            self.y_heading = -self.y_heading

    def render(self, screen: Surface) -> None:
        screen.blit(self.image, (self.x, self.y))


class NPC:
    def __init__(self, x: float, y: float) -> None:
        self.x: float = x
        self.y: float = y
        self.image: Surface = TO_MO_SPRITE

    def render(self, screen: Surface) -> None:
        screen.blit(self.image, (self.x, self.y))


class ItemType(enum.Enum):
    DIAMOND_BLUE = 0
    DIAMOND_RED = 1


class GameItem:
    def __init__(self, x: float, y: float, type: ItemType) -> None:
        self.x: float = x
        self.y: float = y
        self.image: Surface
        self.type = type
        self.name: str
        self.hidden = False

        if type == ItemType.DIAMOND_BLUE:
            self.name = "Kim Cuong Xanh"
            self.image = DIAMOND_BLUE_SPRITE
        elif type == ItemType.DIAMOND_RED:
            self.name = "Kim Cuong Do"
            self.image = DIAMOND_RED_SPRITE

    def set_hidden(self):
        self.hidden = True

    def render(self, screen: Surface) -> None:
        if not self.hidden:
            screen.blit(self.image, (self.x, self.y))


class GameStateType(enum.Enum):
    RUNNING = 0
    WON = 1
    LOST = 2

class GameState:
    def __init__(self, score: int) -> None:
        self.state: GameStateType = None
        self.score: int = None
        self.status_text: Surface = None
        self.score_text: Surface = None
        self.update_score(score)
        self.update_state(GameStateType.RUNNING)
    def update_state(self, state: GameStateType) -> None:
        self.state = state

        if self.state == GameStateType.WON:
            self.status_text = FREESANSBOLD_48.render("YOU WON!!", True, RED)
        elif self.state == GameStateType.LOST:
            self.status_text = FREESANSBOLD_48.render("YOU LOST!!", True, RED)
        elif self.state == GameStateType.RUNNING:
            self.status_text = None
    def update_score(self, score: int) -> None:
        self.score = score
        self.score_text: Surface = FREESANSBOLD_24.render("Score: %d" % score, True, BLUE)

    def render(self, screen: Surface) -> None:
        if self.score_text:
            screen.blit(self.score_text, (10, 10)) 
        if self.status_text:
            position = (
                SCREEN_WIDTH // 2 - self.status_text.get_width() // 2,
                SCREEN_HEIGHT // 2 - self.status_text.get_height() // 2,
            )

            screen.blit(self.status_text, position)
            
def overlap(x1: float, y1: float, image1: Surface, x2: float, y2: float, image2: Surface) -> bool:
    """Returns True if 2 items overlap."""
    mask1 = pygame.mask.from_surface(image1)
    mask2 = pygame.mask.from_surface(image2)
    offset_x = x2 - x1
    offset_y = y2 - y1
    return bool(mask1.overlap(mask2, (offset_x, offset_y)))

player: Player = Player(350, 200)

list_robot: List[Robot] = [
    Robot(500, 500, 1, 1),
    Robot(50, 50, -2, 2),
    Robot(500, 50, 3, 5),
]

list_item: List[GameItem] = [
    GameItem(600, 500, ItemType.DIAMOND_BLUE),
    GameItem(800, 500, ItemType.DIAMOND_RED),
    GameItem(1000, 400, ItemType.DIAMOND_RED),
]

to_mo: NPC = NPC(1000, 50)


game_state: GameState = GameState(score=0)
running: bool = True
while running:
    if pygame.event.peek(pygame.QUIT):
        running = False
        break
    if game_state.state == GameStateType.RUNNING:
        player.update()

        for robot in list_robot:
            robot.update()

        for item in list_item:
            if not item.hidden:
                if overlap(player.x, player.y, player.image, item.x, item.y, item.image):
                    item.set_hidden()
                    new_score: int = game_state.score + 1
                    game_state.update_score(new_score)

        for robot in list_robot:
            if overlap(player.x, player.y, player.image, robot.x, robot.y, robot.image):
                print("YOU LOST!!")
                game_state.update_state(GameStateType.LOST)

        if overlap(player.x, player.y, player.image, to_mo.x, to_mo.y, to_mo.image):
            print("YOU WON!!")
            game_state.update_state(GameStateType.WON)
    
    screen.fill(WHITE)
    screen.blit(BACKGROUND_SPRITE, (0, 0))

    player.render(screen)

    for robot in list_robot:
        robot.render(screen)

    for item in list_item:
        item.render(screen)

    to_mo.render(screen)

    game_state.render(screen)

    pygame.display.flip()
    clock.tick(FPS)

class Menu(BaseWorld):
    """The menu page."""

    def __init__(self, screen: Surface, can_resume: bool) -> None:
        super().__init__(screen)
        self.can_resume = can_resume
        self.menu = pygame_menu.Menu(
            GameConfig.NAME,
            GameConfig.WIDTH,
            GameConfig.HEIGHT,
            theme=pygame_menu.themes.THEME_SOLARIZED,
        )

        frame = self.menu.add.frame_v(GameConfig.WIDTH - 700, GameConfig.HEIGHT - 400)
        if not self.can_resume:
            frame.pack(self.menu.add.button("Play", partial(start_game, level_id=1)))
        else:
            frame.pack(self.menu.add.button("Resume", GameEvent(EventType.RESUME_GAME).post))
            frame.pack(
                self.menu.add.button("Restart Level", GameEvent(EventType.RESTART_LEVEL).post)
            )

        frame.pack(self.menu.add.button("Quit", lambda: GameEvent(pygame.QUIT).post()))

    def tick(self, events: Sequence[GameEvent]) -> bool:
        if self.menu.is_enabled():
            self.menu.update([e.event for e in events])
            self.menu.draw(self.screen)
        return True

def start_or_resume_game(self, level_id: int, force_start: bool):
    self.active_world = self.WORLD_GAME
    if force_start or not self.worlds[self.active_world] or level_id != self.level_id:
        logger.info(f"Current level: {self.level_id} -> (Re)starting level: {level_id}")
        self.level_id = level_id
        self.worlds[self.active_world] = World(self.screen, level_id=level_id)

        # TODO: this could be optimized instead of initiating a new Menu instance somehow?
        self.worlds[self.WORLD_MENU] = Menu(self.screen, can_resume=True)
        
for e in events:
    if e.is_type(EventType.START_GAME):
        self.start_or_resume_game(level_id=e.event.level_id, force_start=True)
    elif e.is_type(EventType.RESTART_LEVEL):
        self.start_or_resume_game(level_id=self.level_id, force_start=True)
    elif e.is_type(EventType.RESUME_GAME):
        self.start_or_resume_game(level_id=self.level_id, force_start=False)
    elif e.is_type(EventType.LEVEL_END):
        self.start_or_resume_game(level_id=self.level_id + 1)
    elif e.is_key_up(pygame.K_ESCAPE) and self.active_world == self.WORLD_GAME:
        self.active_world = self.WORLD_MENU

class PlayerInventory(BaseEntity):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.inventory: List = []
        self.rect.centery = self.rect.y + PlayerInventoryConfig.TILE_SIZE // 2

    def set_inventory(self, inventory: List):
        """Set the backend data, called by Player."""
        self.inventory = inventory

    def render(
        self,
        screen: pygame.Surface,
        *args,
        **kwargs,
    ) -> None:
        super().render(screen, *args, **kwargs)

        # Render the collected items, each with a count.
        # This computation could be optimized more for performance.
        counter = Counter([item.entity_type for item in self.inventory])
        inventory_dict = {item.entity_type: item for item in self.inventory}
        x = PlayerInventoryConfig.X
        y = PlayerInventoryConfig.Y
        for entity_type, cnt in counter.items():
            x += PlayerInventoryConfig.X_STEP
            inventory_dict[entity_type].render(
                screen,
                x_y=(x, y),
                scale=(PlayerInventoryConfig.TILE_SIZE, PlayerInventoryConfig.TILE_SIZE),
            )
            util.display_text(
                screen,
                text=str(cnt),
                x=x + PlayerInventoryConfig.TILE_SIZE - 2,
                y=y + PlayerInventoryConfig.TILE_SIZE - 2,
                color=Color.TEXT_INVENTORY_CNT,
            )

class PlayerInventoryConfig:
    X: int = 290
    Y: int = 30
    X_STEP: int = 60  # distance between 2 consecutive items

    # the simple vertical divider
    SPRITE_PATH: Path = ASSET_DIR / "items" / "player_inventory.png"
    SCALE: int = 1

    TILE_SIZE: int = 34
    
elif entity_type == EntityType.PLAYER_INVENTORY:
    return PlayerInventory(
        entity_type=entity_type,
        x=PlayerInventoryConfig.X,
        y=PlayerInventoryConfig.Y,
        sprite_path=PlayerInventoryConfig.SPRITE_PATH,
        scale=PlayerInventoryConfig.SCALE,
    )

def _pick_item_near_by(self):
    """
    If Player collides with a collectable entity, remove that entity from World,
    while adding that entity to the self.inventory list.
    """
    for entity in self.world.get_collectable_tiles():
        if self.collide(entity):
            self.world.remove_entity(entity.id)
            self.inventory.append(entity)
            logger.info(f"Player picked up 1 {entity.entity_type}")
            
def _update_inventory_entity(self):
    """
    This Player entity directly manages a PlayerInventory entity.
    """
    if not self.inventory_entity_id:
        self.inventory_entity_id = self.world.add_entity(EntityType.PLAYER_INVENTORY)
    self.world.get_entity(self.inventory_entity_id).set_inventory(self.inventory)
    
TRAMPOLINE_PART_SPRING = 31
TRAMPOLINE_PART_FRAME = 32

{
    "Subject": "Táy Máy",
    "Line": "Được ạ!",
    "QuestToStart": "TRAMPOLINE"
}

QUEST_START = pygame.event.custom_type()
QUEST_END = pygame.event.custom_type()
BOSS_DIE = pygame.event.custom_type()

class TrampolinePart(BaseEntity):
    """
    Trampoline parts that can be picked up to give to an NPC.
    """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.set_active(False)

    def update(self, events: Sequence[GameEvent], world: World):
        """
        Turn on sprite visibility when the TRAMPOLINE quest starts.
        """
        super().update(events, world)
        for e in self.events:
            if e.is_type(EventType.QUEST_START) and e.event.quest_name == QuestName.TRAMPOLINE:
                self.set_active(True)

elif entity_type in TRAMPOLINE_PART_TYPES:
    return TrampolinePart(
        entity_type=entity_type,
        x=x,
        y=y,
        sprite_path=ASSET_DIR / "items" / f"{entity_type.name.lower()}.png",
        scale=(GameConfig.TILE_SIZE, GameConfig.TILE_SIZE),
    )

str_quest_name = next_dialogue_item.get("QuestToStart")
if str_quest_name:
    quest_name = QuestName[str_quest_name]
    logger.info(f"Starting Quest: {quest_name}")
    self.should_loop_last_dialogue = True
    GameEvent(EventType.QUEST_START, sender_id=self.id, quest_name=quest_name).post()
    
from entities.animated_entity import PropEntity
class Trampoline(PropEntity):
    """
    Trampoline item for the TRAMPOLINE_QUEST. This class just inherits from the parent class and
    does not need any custom behavior hence the body is empty.
    """
    
TRAMPOLINE = 30

class TrampolineConfig:
    SPRITE_PATH: Path = ASSET_DIR / "items" / "trampoline"
    SCALE: float = 0.3
    ANIMATION_INTERVAL_MS: int = 200
    
elif entity_type == EntityType.TRAMPOLINE:
    return Trampoline(
        entity_type=entity_type,
        x=x,
        y=y,
        sprite_path=TrampolineConfig.SPRITE_PATH,
        scale=TrampolineConfig.SCALE,
        animation_interval_ms=TrampolineConfig.ANIMATION_INTERVAL_MS,
    )

def get_trampolines(self) -> List[BaseEntity]:
    return [
        entity
        for entity in self.entities.values()
        if entity.entity_type == EntityType.TRAMPOLINE
    ]

def get_trampolines(self) -> List[BaseEntity]:
    return [
        entity
        for entity in self.entities.values()
        if entity.entity_type == EntityType.TRAMPOLINE
    ]

# add a trampoline into a level temporary for development
self.add_entity(
    EntityType.TRAMPOLINE,
    76,
    612,
)

def _maybe_jump_with_trampoline(self):
    for trampoline in self.world.get_trampolines():
        if self.collide(trampoline) and self.rect.bottom > trampoline.rect.top:
            trampoline.set_action(ActionType.JUMP)
            self.jump_with_trampoline()
        else:
            trampoline.set_action(ActionType.IDLE)
            
def update(self, events: Sequence[GameEvent], world: World) -> None:
        super().update(events, world)
        self._update_npc_near_by()
        self._pick_item_near_by()
        self._handle_events()
        self._update_screen_offset()

        # highlight this call only
        self._maybe_jump_with_trampoline()

        # Manage the dependent entities.
        self._update_inventory_entity()
        
from typing import Callable, Optional
from level_logics import one
def get_event_handler(level_id: int) -> Optional[Callable]:
    return {
        1: one.event_handler,
    }.get(level_id)

from __future__ import annotations

from typing import TYPE_CHECKING

from common.event import EventType, GameEvent
from common.types import TRAMPOLINE_PART_TYPES, EntityType, QuestName

if TYPE_CHECKING:
    from worlds.world import World


def event_handler(world: World) -> None:
    """
    Logics for some specific events in level 1.
    """
    for event in world.events:
        npc_chu_nam_id = world.get_entity_id_by_type(EntityType.NPC_CHU_NAM)

        # Player finishes TRAMPOLINE quest.
        if (
            event.get_sender_id() == npc_chu_nam_id
            and event.is_type(EventType.NPC_DIALOGUE_END)
            and world.player.count_inventory(TRAMPOLINE_PART_TYPES) >= 4
        ):
            GameEvent(
                EventType.QUEST_END,
                listener_id=npc_chu_nam_id,
                quest_name=QuestName.TRAMPOLINE,
            ).post()

            world.player.discard_inventory(TRAMPOLINE_PART_TYPES)

            # NPC makes the trampoline
            npc = world.get_entity(npc_chu_nam_id)
            world.add_entity(
                EntityType.TRAMPOLINE,
                npc.rect.x + 76,
                npc.rect.y + 156,
            )
            

pygame.quit()

